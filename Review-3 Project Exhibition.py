import tkinter as tk
from tkinter import*
import os
from turtle import clear
root = tk.Tk()
root.title('Vulnerability Detector and Code Quality Analyzer')
root.geometry("1366x760+40+40")
canvas = tk.Canvas(root, height = 3000, width = 3000, bg = "white")
canvas.grid()
myLabel1 = tk.Label(root, text="Website Vulnerability Detector and Code Quality Analyzer ", bg = "white", fg="#a869d0", font=('underline', 20,'bold') ).place(x=500, y=50)
frame = tk.Frame(root, bg= "#857bf5")
frame.place(relwidth=0.3, relheight=1.0)
Label1 = tk.Label(root, text="URL: ",bg="white",font=('underline', 20, 'bold')).place(x=500, y=260)
e=tk.Entry(root, width=125, bg="#cab9fb", borderwidth=5)
e.place(x=500, y=300)


#XSS backend code starts
import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
def get_all_forms(url):
    """Given a `url`, it returns all forms from the HTML content"""
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")
def get_form_details(form):
    """
    This function extracts all possible useful information about an HTML `form`
    """
    details = {}
    # get the form action (target url)
    action = form.attrs.get("action", "").lower()
    # get the form method (POST, GET, etc.)
    method = form.attrs.get("method", "get").lower()
    # get all the input details such as type and name
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    # put everything to the resulting dictionary
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
def submit_form(form_details, url, value):
    """
    Submits a form given in `form_details`
    Params:
        form_details (list): a dictionary that contain form information
        url (str): the original URL that contain that form
        value (str): this will be replaced to all text and search inputs
    Returns the HTTP Response after form submission
    """
    # construct the full URL (if the url provided in action is relative)
    target_url = urljoin(url, form_details["action"])
    # get the inputs
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        # replace all text and search values with `value`
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            # if input name and value are not None, 
            # then add them to the data of form submission
            data[input_name] = input_value

    print(f"[+] Submitting malicious payload to {target_url}")
    print(f"[+] Data: {data}")
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        # GET request
        return requests.get(target_url, params=data)
def scan_xss(url):
    """
    Given a `url`, it prints all XSS vulnerable forms and 
    returns True if any is vulnerable, False otherwise
    """
    # get all the forms from the URL
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = "<Script>alert('hi')</scripT>"
    # returning value
    is_vulnerable = False
    # iterate over all forms
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
            Label2 = tk.Label(root, text="XSS Vulnerability:Detected \n Code Quality: Illegitimate",fg="Red", bg="white",font=('undreline', 20, 'bold')).place(x=650, y=450)
            # won't break because we want to print available vulnerable forms
        else:
            Label3 = tk.Label(root, text="XSS Vulnerability:Not Found \n Code Quality: Legitimate" ,fg="Green", bg="white",font=('undreline', 20, 'bold')).place(x=650, y=450)
            

    return is_vulnerable
def XSS():
    if __name__ == "__main__":
        url = e.get()
        print(scan_xss(url))
#XSS backend code ends


#SQLIA backend code starts
import requests
from bs4 import BeautifulSoup 
from urllib.parse import urljoin
from pprint import pprint

# initialize an HTTP session & set the browser
s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"

def get_all_forms(url):
    """Given a `url`, it returns all forms from the HTML content"""
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")


def get_form_details(form):
    """
    This function extracts all possible useful information about an HTML `form`
    """
    details = {}
    # get the form action (target url)
    try:
        action = form.attrs.get("action").lower()
    except:
        action = None
    # get the form method (POST, GET, etc.)
    method = form.attrs.get("method", "get").lower()
    # get all the input details such as type and name
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})
    # put everything to the resulting dictionary
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
def is_vulnerable(response):
    """A simple boolean function that determines whether a page 
    is SQL Injection vulnerable from its `response`"""
    errors = {
        # MySQL
        "you have an error in your sql syntax;",
        "warning: mysql",
        # SQL Server
        "unclosed quotation mark after the character string",
        # Oracle
        "quoted string not properly terminated",
    }
    for error in errors:
        # if you find one of these errors, return True
        if error in response.content.decode().lower():
            return True
    # no error detected
    return False
def scan_sql_injection(url):
    # test on URL
    for c in "\"'":
        # add quote/double quote character to the URL
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)
        # make the HTTP request
        res = s.get(new_url)
        if is_vulnerable(res):
            # SQL Injection detected on the URL itself, 
            # no need to preceed for extracting forms and submitting them
            print("[+] SQL Injection vulnerability detected, link:", new_url)
            Label4 = tk.Label(root, text="SQL Injection Vulnerability:Detected \n Code Quality: Illegitimate",fg="Red", bg="white",font=('underline', 20, 'bold')).place(x=650, y=450)
        else:
            Label5 = tk.Label(root, text="SQL Injection Vulnerability:Not Found \n Code Quality: Legitimate ",fg="Green", bg="white",font=('underline', 20, 'bold')).place(x=600, y=450)
        return
    # test on HTML forms
    # forms = get_all_forms(url)
    # print(f"[+] Detected {len(forms)} forms on {url}.")
    # for form in forms:
    #     form_details = get_form_details(form)
    #     for c in "\"'":
    #         # the data body we want to submit
    #         data = {}
    #         for input_tag in form_details["inputs"]:
    #             if input_tag["type"] == "hidden" or input_tag["value"]:
    #                 # any input form that is hidden or has some value,
    #                 # just use it in the form body
    #                 try:
    #                     data[input_tag["name"]] = input_tag["value"] + c
    #                 except:
    #                     pass
    #             elif input_tag["type"] != "submit":
    #                 # all others except submit, use some junk data with special character
    #                 data[input_tag["name"]] = f"test{c}"
    #         # join the url with the action (form request URL)
    #         url = urljoin(url, form_details["action"])
    #         if form_details["method"] == "post":
    #             res = s.post(url, data=data)
    #         elif form_details["method"] == "get":
    #             res = s.get(url, params=data)
    #         # test whether the resulting page is vulnerable
    #         if is_vulnerable(res):
    #             print("SQL Injection vulnerability detected, link:", url)
    #             print("[+] Form:")
    #             pprint(form_details)
                
def SQLIA():
    if __name__ == "__main__":
        url = e.get()
        scan_sql_injection(url)

#SQLIA backend code ends

#Phishing attack backend code starts
def Phishing():
    #import libraries
    import pandas as pd # use for data manipulation and analysis
    from sklearn.linear_model import LogisticRegression # algo use to predict good or bad
    from sklearn.model_selection import train_test_split # spliting the data between feature and target
    from sklearn.metrics import confusion_matrix # gives info about actual and predict
    from nltk.tokenize import RegexpTokenizer # regexp tokenizers use to split words from text  
    from sklearn.feature_extraction.text import CountVectorizer # create sparse matrix of words using regexptokenizes  
    from sklearn.pipeline import make_pipeline # use for combining all prerocessors techniuqes and algos
    import pickle# use to dump model 
    import warnings # ignores pink warnings 

    warnings.filterwarnings('ignore')

    #loading the dataset
    phish_data = pd.read_csv('phishing_site_urls.csv')
    pipeline_ls = make_pipeline(CountVectorizer(tokenizer = RegexpTokenizer(r'[A-Za-z]+').tokenize,stop_words='english'), LogisticRegression())

    #training the datasets
    trainX, testX, trainY, testY = train_test_split(phish_data.URL, phish_data.Label)
    pipeline_ls.fit(trainX,trainY)
    pipeline_ls.score(testX,testY) 

    con_mat = pd.DataFrame(confusion_matrix(pipeline_ls.predict(testX), testY),
        columns = ['Predicted:Bad', 'Predicted:Good'],
        index = ['Actual:Bad', 'Actual:Good'])


    pickle.dump(pipeline_ls,open('phishing.pkl','wb'))
    loaded_model = pickle.load(open('phishing.pkl', 'rb'))
    x = e.get()
    predict = [x]
    result1=loaded_model.predict(predict)
    print(result1)
    if result1[0]=="bad":
        Label6 = tk.Label(root, text="Phishing Vulnerability:Detected \n Code Quality: Illegitimate ",fg="Red", bg="white",font=('underline', 20, 'bold')).place(x=650, y=450)
    else:
        Label7 = tk.Label(root, text="Phishing Vulnerability:Not Found \n Code Quality: Legitimate ",fg="Green", bg="white",font=('underline', 20, 'bold')).place(x=650, y=450)
#Phishing attack backend code ends
def on_command():
    Label8 = tk.Label(root, text="                                                                                                                                        \n                                                                                                  ",fg="Red", bg="white",font=('undreline', 20, 'bold')).place(x=500, y=450)
    return Label8
on_command =tk.Button(root, text = "Clear",padx= 50, pady = 10, fg="white",bg="#857bf5",font=('underline', 12, 'bold'),command=on_command)
on_command.place(x= 750, y = 350, height = 70, width = 200)



XSS = tk.Button(frame, text="Cross-Site Scripting", padx=10,
                pady=5, fg="black", bg="white", font=('underline', 12, 'bold'), command=XSS)
XSS.place(x=100, y=100, height=60, width=200)

SQLIA = tk.Button(frame, text="SQL Injection", padx=26,
                  pady=5, fg="black", bg="white", font=('underline', 12, 'bold'), command=SQLIA)
SQLIA.place(x=100, y=300, height=60,  width=200)

Phishing = tk.Button(frame, text="Phishing", padx=38,
                     pady=5, fg="black", bg="white", font=('underline', 12, 'bold'), command=Phishing)
Phishing.place(x=100, y=500, height=60, width=200)

root.mainloop()